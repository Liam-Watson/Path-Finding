[{"/home/liam/WebstormProjects/search/src/index.js":"1","/home/liam/WebstormProjects/search/src/reportWebVitals.js":"2","/home/liam/WebstormProjects/search/src/App.js":"3","/home/liam/WebstormProjects/search/src/components/Plane.js":"4","/home/liam/WebstormProjects/search/src/components/Node.js":"5","/home/liam/WebstormProjects/search/src/components/Menu.js":"6","/home/liam/WebstormProjects/search/src/functions/menuClick.js":"7","/home/liam/WebstormProjects/search/src/algorithms/dijkstra.js":"8","/home/liam/WebstormProjects/search/src/components/searchingContext.js":"9"},{"size":242,"mtime":1607973552373,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1607973229925,"results":"12","hashOfConfig":"11"},{"size":259,"mtime":1608322085836,"results":"13","hashOfConfig":"11"},{"size":7263,"mtime":1609763937912,"results":"14","hashOfConfig":"11"},{"size":4752,"mtime":1609762059552,"results":"15","hashOfConfig":"11"},{"size":3085,"mtime":1609763980176,"results":"16","hashOfConfig":"11"},{"size":270,"mtime":1608320592302,"results":"17","hashOfConfig":"11"},{"size":2197,"mtime":1608231454480,"results":"18","hashOfConfig":"11"},{"size":80,"mtime":1609763741832,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1m6y8ra",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/liam/WebstormProjects/search/src/index.js",[],["40","41"],"/home/liam/WebstormProjects/search/src/reportWebVitals.js",[],"/home/liam/WebstormProjects/search/src/App.js",[],"/home/liam/WebstormProjects/search/src/components/Plane.js",["42","43","44","45","46"],"import React from 'react';\nimport Node from \"./Node\";\nimport Menu from \"./Menu\"\nimport dijkstra, {getFinalPath} from \"../algorithms/dijkstra.js\"\nimport \"../fonts/font-awesome-4.7.0/css/font-awesome.css\";\nimport menuClick from \"../functions/menuClick\";\nimport {Searching} from \"./searchingContext\";\n// let Nodes = [];\nconst SCREEN_WIDTH = Math.floor(window.screen.width);\nconst SCREEN_HEIGHT = Math.floor(window.screen.height);\nconst BLOCK_DIM = Math.floor(SCREEN_HEIGHT * 0.06);\nconsole.log(BLOCK_DIM)\nconst NUM_COLS = Math.floor(SCREEN_WIDTH / BLOCK_DIM);\nconst NUM_ROWS = Math.floor(SCREEN_HEIGHT / BLOCK_DIM);\nlet startNodeX = 0;\nlet startNodeY = 0;\nconsole.log(BLOCK_DIM)\nlet endNodeX = Math.floor((SCREEN_WIDTH) / BLOCK_DIM) - 1;\nlet endNodeY = Math.floor((SCREEN_HEIGHT) / BLOCK_DIM) - 1;\nvar c;\nvar t;\n\n\n\nexport default class Plane extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.reset = this.reset.bind(this)\n        this.start = this.runDijkstra.bind(this)\n        this.state = {\n            mouseDown: false,\n            grid: [],\n            done: false,\n            searching: false,\n        }\n\n    }\n\n    componentDidMount() {\n        const grid = logicalGrid();\n        this.setState({grid});\n    }\n\n\n    reset() {\n        console.log(\"reset\")\n        // let grid = logicalGrid();\n        this.setState({grid: logicalGrid()}, ()=>{\n            console.log(this.state.grid);\n        });\n        console.log(logicalGrid(), this.state.grid)\n    }\n\n    runDijkstra() {\n        this.setState({searching: true})\n        let addj = 0;\n        const Nodes = this.state.grid;\n        let searched = dijkstra(this.state.grid, this.state.grid[startNodeX][startNodeY], this.state.grid[endNodeX][endNodeY]);\n        // console.log(searched)\n        let elementArr = [];\n        const pathFound = !(searched[searched.length - 1].isEnd);\n        for (let p = 0; p < searched.length; p++) {\n            addj++;\n\n            const {x, y} = searched[p];\n            if (searched[p].visited) {\n                let flag = false;\n                let xF;\n                let yF;\n                for (let i = 0; i < Nodes.length; i++) {\n                    for (let j = 0; j < Nodes[i].length; j++) {\n                        if (i === x && j === y) {\n                            flag = true;\n                            xF = i;\n                            yF = j;\n                            break;\n                        }\n\n                    }\n                    if (flag) {\n                        break;\n                    }\n                }\n\n                setTimeout(() => {\n                    // console.log(xF*30, yF*30)\n                    if (p === searched.length - 1) {\n                        this.shortestPath();\n                    }\n\n                    if (!searched[p].isEnd && !searched[p].isStart) {\n                        elementArr.push((xF + \" \" + yF));\n\n                        document.getElementById(xF + \" \" + yF).className = \"node-visited\";\n                    }\n                    if (p === searched.length - 1 && pathFound) {\n                        for (let x of elementArr) {\n                            // console.log(elementArr,x)\n                            document.getElementById(x).className = \"not-found\";\n                        }\n                    }\n\n                }, 10 * addj)\n            }\n\n        }\n\n    }\n    notSearching(){\n        // this.setState({searching: false})\n    }\n    shortestPath() {\n        let nodes = getFinalPath(this.state.grid[endNodeX][endNodeY]);\n        for (let i = 0; i < nodes.length; i++) {\n            setTimeout(() => {\n                // console.log(nodes[i].x + \" \" + nodes[i].y)\n                if (!nodes[i].isStart && !nodes[i].isEnd) {\n                    document.getElementById(nodes[i].x + \" \" + nodes[i].y).className = \"node-fin\";\n                }\n            this.notSearching();\n            }, 100 * (i ** 1));\n            if (i === nodes.length - 1) {\n                this.setState({done: true});\n            }\n        }\n\n    }\n\n    _mouseDown() {\n        this.setState({mouseDown: true})\n    }\n\n    _mouseUp() {\n        this.setState({mouseDown: false})\n    }\n\n    _mouseOn(x, y) {\n        if (this.state.mouseDown && document.getElementById(x + \" \" + y).className === \"node\") {\n            const wallGrid = addWalls(this.state.grid, x, y);\n            this.setState({wallGrid, mouseDown: true})\n        } else {\n            return;\n        }\n    }\n\n    render() {\n        const {grid, mouseDown} = this.state;\n        return (\n\n            <Searching.Provider value={this.state.searching}>\n                {/*<div id={\"hamburger\"} onClick={menuClick.bind(this)} className={\"fa fa-bars\"}>*/}\n                    <Menu start={this.start} reset={this.reset} />\n                {/*</div>*/}\n                <div className={\"node-container\"}>\n                    {\n                        grid.map((row, id) => {\n                            return row.map((node, nodeId) => {\n                                    let {x, y, isStart, isEnd, wall, visited} = node;\n                                    let xPos = x;\n                                    let yPos = y;\n                                    // console.log(x,y)\n\n                                    return (<Node\n                                        key={x + \" \" + y}\n                                        x={x * BLOCK_DIM}\n                                        y={y * BLOCK_DIM}\n                                        id={x + \" \" + y}\n                                        isStart={isStart}\n                                        isEnd={isEnd}\n                                        wall={wall}\n                                        blockDim={BLOCK_DIM}\n                                        mouseIsPressed={mouseDown}\n                                        mouseDown={(xPos, yPos) => this._mouseDown(x, y)}\n                                        mouseOn={(xPos, yPos) => {\n                                            // console.log(x,y);\n                                            this._mouseOn(x, y);\n                                        }}\n                                        mouseUp={() => this._mouseUp()}\n                                        visited = {visited}\n                                    />)\n                                }\n                            )\n                        })\n                    }\n                </div>\n            </Searching.Provider>\n        );\n    }\n\n\n}\n\nconst logicalNode = (x, y) => {\n    return ({\n        x,\n        y,\n        isStart: x === startNodeX && y === startNodeY,\n        isEnd: x === endNodeX && y === endNodeY,\n        visited: false,\n        wall: false,\n        prevNode: null,\n        distance: Infinity,\n    });\n\n}\n\nlet logicalGrid = () => {\n    let grid = [];\n    for (let k = 0; k < NUM_COLS; k += 1) {\n        let row = []\n        for (let p = 0; p < NUM_ROWS; p += 1) {\n            row.push(logicalNode(k, p))\n        }\n        grid.push(row);\n    }\n    return grid;\n}\n\nfunction addWalls(grid, x, y) {\n    const newGrid = grid.slice();\n    let node = newGrid[x][y];\n    let newNode = {\n        ...node,\n        wall: true\n    }\n    newGrid[x][y] = newNode;\n    return newGrid\n}\n","/home/liam/WebstormProjects/search/src/components/Node.js",["47","48","49","50","51"],"/home/liam/WebstormProjects/search/src/components/Menu.js",["52"],"/home/liam/WebstormProjects/search/src/functions/menuClick.js",[],"/home/liam/WebstormProjects/search/src/algorithms/dijkstra.js",[],"/home/liam/WebstormProjects/search/src/components/searchingContext.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":17},{"ruleId":"57","severity":1,"message":"61","line":20,"column":5,"nodeType":"59","messageId":"60","endLine":20,"endColumn":6},{"ruleId":"57","severity":1,"message":"62","line":21,"column":5,"nodeType":"59","messageId":"60","endLine":21,"endColumn":6},{"ruleId":"57","severity":1,"message":"63","line":161,"column":41,"nodeType":"59","messageId":"60","endLine":161,"endColumn":45},{"ruleId":"57","severity":1,"message":"64","line":162,"column":41,"nodeType":"59","messageId":"60","endLine":162,"endColumn":45},{"ruleId":"65","severity":1,"message":"66","line":8,"column":22,"nodeType":"67","messageId":"68","endLine":10,"endColumn":10},{"ruleId":"57","severity":1,"message":"69","line":108,"column":13,"nodeType":"59","messageId":"60","endLine":108,"endColumn":15},{"ruleId":"57","severity":1,"message":"70","line":109,"column":13,"nodeType":"59","messageId":"60","endLine":109,"endColumn":17},{"ruleId":"57","severity":1,"message":"71","line":110,"column":13,"nodeType":"59","messageId":"60","endLine":110,"endColumn":20},{"ruleId":"57","severity":1,"message":"72","line":111,"column":13,"nodeType":"59","messageId":"60","endLine":111,"endColumn":18},{"ruleId":"73","severity":1,"message":"74","line":62,"column":9,"nodeType":"75","messageId":"76","endLine":83,"endColumn":11},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'menuClick' is defined but never used.","Identifier","unusedVar","'c' is defined but never used.","'t' is defined but never used.","'xPos' is assigned a value but never used.","'yPos' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'id' is assigned a value but never used.","'wall' is assigned a value but never used.","'isStart' is assigned a value but never used.","'isEnd' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation"]