[{"/home/liam/WebstormProjects/search/src/index.js":"1","/home/liam/WebstormProjects/search/src/reportWebVitals.js":"2","/home/liam/WebstormProjects/search/src/App.js":"3","/home/liam/WebstormProjects/search/src/components/Plane.js":"4","/home/liam/WebstormProjects/search/src/components/Node.js":"5","/home/liam/WebstormProjects/search/src/dijkstra.js":"6"},{"size":242,"mtime":1607973552373,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607973229925,"results":"9","hashOfConfig":"8"},{"size":257,"mtime":1608018018566,"results":"10","hashOfConfig":"8"},{"size":6662,"mtime":1608190275592,"results":"11","hashOfConfig":"8"},{"size":6092,"mtime":1608190275568,"results":"12","hashOfConfig":"8"},{"size":2266,"mtime":1608188949935,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1n4n44o",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/liam/WebstormProjects/search/src/index.js",[],["28","29"],"/home/liam/WebstormProjects/search/src/reportWebVitals.js",[],"/home/liam/WebstormProjects/search/src/App.js",[],"/home/liam/WebstormProjects/search/src/components/Plane.js",[],"/home/liam/WebstormProjects/search/src/components/Node.js",["30","31","32","33","34"],"import React from 'react';\nimport \"./Node.css\"\n\n\nexport default class Node extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // checked: false,\n            // wall: false,\n            // over: false,\n            // move: false,\n            // click: false\n\n        } = this.props;\n    }\n\n    _mouseMv() {\n\n        this.setState(past => {\n                // console.log(past)\n                if (past.wall) {\n\n                    return past\n                } else {\n                    if (this.props.onMouseDown && past.click) {\n\n                        return {\n                            checked: false,\n                            wall: true,\n                            over: true,\n                            move: true,\n                            click: true\n                        }\n                    } else {\n                        return (\n                            {\n                                checked: false,\n                                wall: false,\n                                move: true,\n                                over: false,\n                                click: false\n                            }\n                        )\n                    }\n                }\n\n            }\n        );\n    }\n\n    _mouseOver() {\n        this.setState(past => {\n                // console.log(past)\n                if (past.wall) {\n                    return past\n                } else {\n                    if (this.props.onMouseDown && past.over) {\n                        return {\n                            checked: false,\n                            wall: true,\n                            over: true,\n                            move: true,\n                            click: true\n                        }\n                    } else {\n                        return (\n                            {\n                                checked: false,\n                                wall: false,\n                                move: false,\n                                over: true,\n                                click: false\n                            }\n                        )\n                    }\n                }\n\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // console.log(props)\n        if (props.onMouseDown) {\n            return {\n                checked: false,\n                wall: state.wall,\n                move: state.move,\n                over: state.over,\n                click: true\n            }\n        } else {\n            return {\n                checked: false,\n                wall: state.wall,\n                move: state.move,\n                over: state.over,\n                click: false\n            }\n        }\n\n    }\n\n    getWall() {\n        return this.state.wall;\n    }\n\n    render() {\n        const {\n            x,\n            y,\n            id,\n            wall,\n            isStart,\n            isEnd,\n            mouseDown,\n            mouseOn,\n            mouseUp,\n        } = this.props;\n        if (this.props.isStart) {\n            return <div\n                style={{top: this.props.y, left: this.props.x}}\n                className={\"node-start\"} id={this.props.id}\n                onMouseDown={()=> mouseDown(x,y)}\n                onMouseEnter={()=> mouseOn(x,y)}\n                onMouseUp={() => mouseUp()}\n            />\n\n\n        } else if (this.props.isEnd) {\n            return <div style={{top: this.props.y, left: this.props.x}} className={\"node-end\"} id={this.props.id}/>\n        } else if (this.props.wall) {\n            return <div\n                style={{top: this.props.y, left: this.props.x}}\n                className={\"node-wall\"}\n                id={this.props.id}\n                onMouseDown={()=> mouseDown(x,y)}\n                onMouseEnter={()=> mouseOn(x,y)}\n                onMouseUp={() => mouseUp()}\n            />\n        } else {\n            return <div\n                style={{top: this.props.y, left: this.props.x}}\n                className={\"node\"}\n                id={this.props.id}\n                onMouseDown={()=> mouseDown(x,y)}\n                onMouseEnter={()=> mouseOn(x,y)}\n                onMouseUp={() => mouseUp()}\n            />\n        }\n        // if(this.state.wall){\n        //     return <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{backgroundColor: \"aqua\", left: this.props.x, top: this.props.y, width: 30, height:30, position: \"absolute\"}}></button>\n        // }else if(this.props.x === 180 && this.props.y === 180){\n        //     return <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{backgroundColor: \"green\", left: this.props.x, top: this.props.y, width: 30, height:30, position: \"absolute\"}}></button>\n        // }else if(this.props.x === 600 && this.props.y === 600){\n        //     return <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{backgroundColor: \"red\", left: this.props.x, top: this.props.y, width: 30, height:30, position: \"absolute\"}}></button>\n        // }else if(this.state.checked){\n        //     return <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{backgroundColor: \"black\", left: this.props.x, top: this.props.y, width: 30, height:30, position: \"absolute\"}}></button>\n        // }else if(this.props.visited){\n        //     return <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{backgroundColor: \"black\", left: this.props.x, top: this.props.y, width: 30, height:30}}></button>\n        // }else{\n        //     return (\n        //         <button id={this.props.id} onMouseOver={this._mouseOver.bind(this)} onMouseMove={this._mouseMv.bind(this)} style={{ left: this.props.x, top: this.props.y, width:30, height:30, position: \"absolute\"}}></button>\n        //     )\n        // }\n\n    }\n\n}","/home/liam/WebstormProjects/search/src/dijkstra.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":8,"column":22,"nodeType":"41","messageId":"42","endLine":15,"endColumn":10},{"ruleId":"43","severity":1,"message":"44","line":113,"column":13,"nodeType":"45","messageId":"46","endLine":113,"endColumn":15},{"ruleId":"43","severity":1,"message":"47","line":114,"column":13,"nodeType":"45","messageId":"46","endLine":114,"endColumn":17},{"ruleId":"43","severity":1,"message":"48","line":115,"column":13,"nodeType":"45","messageId":"46","endLine":115,"endColumn":20},{"ruleId":"43","severity":1,"message":"49","line":116,"column":13,"nodeType":"45","messageId":"46","endLine":116,"endColumn":18},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'wall' is assigned a value but never used.","'isStart' is assigned a value but never used.","'isEnd' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]